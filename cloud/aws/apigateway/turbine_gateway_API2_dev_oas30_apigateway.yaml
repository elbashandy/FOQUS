openapi: "3.0.1"
info:
  title: "Foqus_CCSI2_Gateway_API"
  version: "2018-09-05T19:55:29Z"
servers:
- url: "https://407osudx4l.execute-api.us-west-1.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "/dev"
paths:
  /simulation/{name}/input:
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /simulation/{name}/input/{path+}:
    get:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "path"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - BasicHTTPAuth: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::656139842689:role/foqus_lambda_role"
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:656139842689:function:get-simulation-input/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 20000
        httpMethod: "POST"
        cacheNamespace: "aofg2p"
        cacheKeyParameters:
        - "method.request.path.path"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "path"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - BasicHTTPAuth: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::656139842689:role/foqus_lambda_role"
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:656139842689:function:put-simulation-input/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 20000
        httpMethod: "POST"
        cacheNamespace: "aofg2p"
        cacheKeyParameters:
        - "method.request.path.path"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /simulation:
    get:
      parameters:
      - name: "verbose"
        in: "query"
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - BasicHTTPAuth: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::656139842689:role/foqus_lambda_role"
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:656139842689:function:get-simulation-list/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /simulation/{name}:
    get:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - TurbineAuthorizer: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::656139842689:role/foqus_lambda_role"
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:656139842689:function:get-simulation/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 20000
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - BasicHTTPAuth: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::656139842689:role/foqus_lambda_role"
        uri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:656139842689:function:put-simulation-name/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    ArrayOfApplication:
      title: "ArrayOfApplication"
      type: "array"
      items:
        title: "Application"
        type: "object"
        properties:
          Name:
            type: "string"
          Inputs:
            type: "array"
            items:
              type: "string"
    Empty:
      title: "Empty Schema"
      type: "object"
  securitySchemes:
    BasicHTTPAuth:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        authorizerUri: "arn:aws:apigateway:us-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-1:656139842689:function:http-basic-authorizer/invocations"
        authorizerResultTtlInSeconds: 3000
        identitySource: "method.request.header.Authorization"
        type: "request"
